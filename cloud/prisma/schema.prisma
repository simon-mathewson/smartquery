generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output        = "generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Connection {
  id                 String   @id @default(uuid()) @db.Uuid
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  database           String
  dbUser             String
  encryptCredentials Boolean
  engine             Engine
  host               String
  name               String
  password           String?
  passwordNonce      String?
  port               Int
  schema             String?
  sshHost            String?
  sshPassword        String?
  sshPasswordNonce   String?
  sshPort            Int?
  sshPrivateKey      String?
  sshPrivateKeyNonce String?
  sshUsePrivateKey   Boolean?
  sshUser            String?
  user               User     @relation(fields: [userId], references: [id])
  userId             String   @db.Uuid

  @@index([userId])
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  expiresAt DateTime
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid

  @@index([token])
  @@index([userId])
}

model User {
  id                     String         @id @default(uuid()) @db.Uuid
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  connections            Connection[]
  dataEncryptionKey      String
  dataEncryptionKeyNonce String
  email                  String         @unique
  keyEncryptionKeySalt   String
  password               String
  passwordSalt           String
  refreshTokens          RefreshToken[]
  isEmailVerified        Boolean        @default(false)
  emailVerificationToken String?        @unique
  resetPasswordToken     String?        @unique

  @@index([emailVerificationToken])
  @@index([resetPasswordToken])
}

enum Engine {
  mysql
  postgres
}
