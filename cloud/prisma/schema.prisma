generator client {
  provider      = "prisma-client-js"
  output        = "generated"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Connection {
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  database                   String
  dbUser                     String
  encryptCredentials         Boolean
  engine                     Engine
  host                       String
  name                       String
  password                   String?
  port                       Int
  schema                     String?
  sshHost                    String?
  sshPassword                String?
  sshPort                    Int?
  sshPrivateKey              String?
  sshUser                    String?
  passwordNonce              String?
  sshPasswordNonce           String?
  sshPrivateKeyNonce         String?
  sshUsePrivateKey           Boolean?
  id                         String   @id @default(uuid()) @db.Uuid
  userId                     String   @db.Uuid
  sshPrivateKeyPassphrase    String?
  useSshPrivateKeyPassphrase Boolean  @default(false)
  user                       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  expiresAt DateTime
  token     String   @unique
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model Subscription {
  createdAt DateTime         @default(now())
  startDate DateTime         @db.Date
  type      SubscriptionType
  userId    String           @unique @db.Uuid
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  usages    Usage[]

  @@index([userId])
}

model Usage {
  id           String       @id @default(uuid()) @db.Uuid
  userId       String       @db.Uuid
  subscription Subscription @relation(fields: [userId], references: [userId], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  type         UsageType
  amount       Int

  @@index([userId, type, createdAt])
}

model User {
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  email                  String         @unique
  password               String
  passwordSalt           String
  dataEncryptionKey      String
  dataEncryptionKeyNonce String
  keyEncryptionKeySalt   String
  id                     String         @id @default(uuid()) @db.Uuid
  isEmailVerified        Boolean        @default(false)
  emailVerificationToken String?        @unique
  resetPasswordToken     String?        @unique
  connections            Connection[]
  refreshTokens          RefreshToken[]
  subscription           Subscription?

  @@index([emailVerificationToken])
  @@index([resetPasswordToken])
}

enum Engine {
  mysql
  postgres
}

enum SubscriptionType {
  plus
}

enum UsageType {
  aiChatInputTokens
  aiChatOutputTokens
  aiInlineCompletionInputTokens
  aiInlineCompletionOutputTokens
  queryDurationSeconds
  queryResponseBytes
}
